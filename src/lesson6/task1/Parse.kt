@file:Suppress("UNUSED_PARAMETER", "ConvertCallChainIntoSequence")

package lesson6.task1

import lesson1.task1.accountInThreeYears
import lesson2.task1.timeForHalfWay
import lesson2.task2.daysInMonth
import ru.spbstu.wheels.product
import ru.spbstu.wheels.toMutableMap
import java.lang.NullPointerException
import java.util.*
import kotlin.math.*

// Урок 6: разбор строк, исключения
// Максимальное количество баллов = 13
// Рекомендуемое количество баллов = 11
// Вместе с предыдущими уроками (пять лучших, 2-6) = 40/54

/**
 * Пример
 *
 * Время представлено строкой вида "11:34:45", содержащей часы, минуты и секунды, разделённые двоеточием.
 * Разобрать эту строку и рассчитать количество секунд, прошедшее с начала дня.
 */
fun timeStrToSeconds(str: String): Int {
    val parts = str.split(":")
    var result = 0
    for (part in parts) {
        val number = part.toInt()
        result = result * 60 + number
    }
    return result
}

/**
 * Пример
 *
 * Дано число n от 0 до 99.
 * Вернуть его же в виде двухсимвольной строки, от "00" до "99"
 */
fun twoDigitStr(n: Int) = if (n in 0..9) "0$n" else "$n"

/**
 * Пример
 *
 * Дано seconds -- время в секундах, прошедшее с начала дня.
 * Вернуть текущее время в виде строки в формате "ЧЧ:ММ:СС".
 */
fun timeSecondsToStr(seconds: Int): String {
    val hour = seconds / 3600
    val minute = (seconds % 3600) / 60
    val second = seconds % 60
    return String.format("%02d:%02d:%02d", hour, minute, second)
}

/**
 * Пример: консольный ввод
 */
fun main() {
    println("Введите время в формате ЧЧ:ММ:СС")
    val line = readLine()
    if (line != null) {
        val seconds = timeStrToSeconds(line)
        if (seconds == -1) {
            println("Введённая строка $line не соответствует формату ЧЧ:ММ:СС")
        } else {
            println("Прошло секунд с начала суток: $seconds")
        }
    } else {
        println("Достигнут <конец файла> в процессе чтения строки. Программа прервана")
    }
}


/**
 * Средняя (4 балла)
 *
 * Дата представлена строкой вида "15 июля 2016".
 * Перевести её в цифровой формат "15.07.2016".
 * День и месяц всегда представлять двумя цифрами, например: 03.04.2011.
 * При неверном формате входной строки вернуть пустую строку.
 *
 * Обратите внимание: некорректная с точки зрения календаря дата (например, 30.02.2009) считается неверными
 * входными данными.
 */
fun dateStrToDigit(str: String): String {
    val parts = str.split(" ")
    val year: Int
    val month: Int
    val day: Int
    if (parts.size != 3) return ""
    try {
        day = parts[0].toInt()
        year = parts[2].toInt()
        month = when (parts[1].lowercase()) {
            "января" -> 1
            "февраля" -> 2
            "марта" -> 3
            "апреля" -> 4
            "мая" -> 5
            "июня" -> 6
            "июля" -> 7
            "августа" -> 8
            "сентября" -> 9
            "октября" -> 10
            "ноября" -> 11
            "декабря" -> 12
            else -> throw NumberFormatException("Incorrect month")
        }
    } catch (e: NumberFormatException) {
        return ""
    }
    if (day > daysInMonth(month, year) || day < 1) return ""
    return "%02d.%02d.%d".format(day, month, year)
}

/**
 * Средняя (4 балла)
 *
 * Дата представлена строкой вида "15.07.2016".
 * Перевести её в строковый формат вида "15 июля 2016".
 * При неверном формате входной строки вернуть пустую строку
 *
 * Обратите внимание: некорректная с точки зрения календаря дата (например, 30 февраля 2009) считается неверными
 * входными данными.
 */
fun dateDigitToStr(digital: String): String {
    val parts = digital.trim().split(".")
    val year: Int
    val month: Int
    val day: Int
    if (parts.size != 3) return ""
    val months = listOf(
        "января",
        "февраля",
        "марта",
        "апреля",
        "мая",
        "июня",
        "июля",
        "августа",
        "сентября",
        "октября",
        "ноября",
        "декабря"
    )
    try {
        day = parts[0].toInt()
        month = parts[1].toInt()
        year = parts[2].toInt()
    } catch (e: NumberFormatException) {
        return ""
    }
    if (day > daysInMonth(month, year) || day < 1) return ""
    if (month < 1 || month > 12) return ""
    if (year < 0) return ""
    return "%d %s %d".format(day, months[month - 1], year)
}

/**
 * Средняя (4 балла)
 *
 * Номер телефона задан строкой вида "+7 (921) 123-45-67".
 * Префикс (+7) может отсутствовать, код города (в скобках) также может отсутствовать.
 * Может присутствовать неограниченное количество пробелов и чёрточек,
 * например, номер 12 --  34- 5 -- 67 -89 тоже следует считать легальным.
 * Перевести номер в формат без скобок, пробелов и чёрточек (но с +), например,
 * "+79211234567" или "123456789" для приведённых примеров.
 * Все символы в номере, кроме цифр, пробелов и +-(), считать недопустимыми.
 * При неверном формате вернуть пустую строку.
 *
 * PS: Дополнительные примеры работы функции можно посмотреть в соответствующих тестах.
 */
fun flattenPhoneNumber(phone: String): String =
    if (!Regex("""(\+?\s*\d[-\s\d]*(\([-\s\d]+\)[-\s\d]+)?)""").matches(phone)) ""
    else phone.filter { it !in "() -" }

/**
 * Средняя (5 баллов)
 *
 * Результаты спортсмена на соревнованиях в прыжках в длину представлены строкой вида
 * "706 - % 717 % 703".
 * В строке могут присутствовать числа, черточки - и знаки процента %, разделённые пробелами;
 * число соответствует удачному прыжку, - пропущенной попытке, % заступу.
 * Прочитать строку и вернуть максимальное присутствующее в ней число (717 в примере).
 * При нарушении формата входной строки или при отсутствии в ней чисел, вернуть -1.
 */
fun bestLongJump(jumps: String): Int {
    var max = -1
    val results = jumps.split(Regex("""\s+"""))
    val delete = listOf("-", "%")
    for (result in results) {
        if (result in delete) continue
        try {
            max = max(max, result.toInt())
        } catch (e: NumberFormatException) {
            return -1
        }
    }
    return max
}

/**
 * Сложная (6 баллов)
 *
 * Результаты спортсмена на соревнованиях в прыжках в высоту представлены строкой вида
 * "220 + 224 %+ 228 %- 230 + 232 %%- 234 %".
 * Здесь + соответствует удачной попытке, % неудачной, - пропущенной.
 * Высота и соответствующие ей попытки разделяются пробелом.
 * Прочитать строку и вернуть максимальную взятую высоту (230 в примере).
 * При нарушении формата входной строки, а также в случае отсутствия удачных попыток,
 * вернуть -1.
 */
fun bestHighJump(jumps: String): Int {
    if (jumps.isEmpty() || !jumps.contains(Regex("""[+%\-\d\s]"""))) return -1
    val results =
        jumps.split(Regex(" ")) // получим список вида [результат, символы, результат, символы и тд.] чередование!
    var max = -1
    for (i in results.indices step 2) {
        if (results[i + 1] == "+" && results[i].toInt() > max) max = results[i].toInt()
    }
    return max
}

/**
 * Сложная (6 баллов)
 *
 * В строке представлено выражение вида "2 + 31 - 40 + 13",
 * использующее целые положительные числа, плюсы и минусы, разделённые пробелами.
 * Наличие двух знаков подряд "13 + + 10" или двух чисел подряд "1 2" не допускается.
 * Вернуть значение выражения (6 для примера).
 * Про нарушении формата входной строки бросить исключение IllegalArgumentException
 */
fun plusMinus(expression: String): Int {
    val sum = expression.split(" ")
    if (!Regex("""\d+""").matches(sum[0])) throw IllegalArgumentException()
    if (sum.size % 2 != 1) throw IllegalArgumentException()
    var result = sum[0].toInt()
    for (i in 1 until sum.size step 2) {
        if (!Regex("""\d+""").matches(sum[i + 1])) throw IllegalArgumentException()
        when (sum[i]) {
            "-" -> result -= sum[i + 1].toInt()
            "+" -> result += sum[i + 1].toInt()
        }
    }
    return result
}

/**
 * Сложная (6 баллов)
 *
 * Строка состоит из набора слов, отделённых друг от друга одним пробелом.
 * Определить, имеются ли в строке повторяющиеся слова, идущие друг за другом.
 * Слова, отличающиеся только регистром, считать совпадающими.
 * Вернуть индекс начала первого повторяющегося слова, или -1, если повторов нет.
 * Пример: "Он пошёл в в школу" => результат 9 (индекс первого 'в')
 */
fun firstDuplicateIndex(str: String): Int = TODO()

/**
 * Сложная (6 баллов)
 *
 * Строка содержит названия товаров и цены на них в формате вида
 * "Хлеб 39.9; Молоко 62; Курица 184.0; Конфеты 89.9".
 * То есть, название товара отделено от цены пробелом,
 * а цена отделена от названия следующего товара точкой с запятой и пробелом.
 * Вернуть название самого дорогого товара в списке (в примере это Курица),
 * или пустую строку при нарушении формата строки.
 * Все цены должны быть больше нуля либо равны нулю.
 */
fun mostExpensive(description: String): String {
    val str = " $description;"
    return if (description.isNotEmpty() && (str.matches(Regex("""(\s\S+\s((\d+\.\d+)|\d+);)+""")))) {
        val product = description.replace(";", "").split(" ")
        // переводим нашу строку в список вида: [название товара, цена, название товара, цена и тд.]
        var max = -1.0
        var maxName = ""
        for (i in product.indices step 2) {
            if (product[i + 1].toDouble() > max) {
                max = product[i + 1].toDouble()
                maxName = product[i]
            }
        }
        maxName
    } else ""
}

/**
 * Сложная (6 баллов)
 *
 * Перевести число roman, заданное в римской системе счисления,
 * в десятичную систему и вернуть как результат.
 * Римские цифры: 1 = I, 4 = IV, 5 = V, 9 = IX, 10 = X, 40 = XL, 50 = L,
 * 90 = XC, 100 = C, 400 = CD, 500 = D, 900 = CM, 1000 = M.
 * Например: XXIII = 23, XLIV = 44, C = 100
 *
 * Вернуть -1, если roman не является корректным римским числом
 */
val digits = mutableMapOf('I' to 1, 'V' to 5, 'X' to 10, 'L' to 50, 'C' to 100, 'D' to 500, 'M' to 1000)
fun fromRoman(roman: String): Int {
    return if (roman.contains(Regex("""[IVXLCDM]"""))) {
        try {
            var res = digits[roman[roman.length - 1]]!!
            for (i in roman.length - 2 downTo 0) {
                res =
                    if (digits[roman[i + 1]]!! > digits[roman[i]]!!) res - digits[roman[i]]!! else res + digits[roman[i]]!!
            }
            res
        } catch (e: NullPointerException) {
            -1
        }
    } else -1
}

/**
 * Очень сложная (7 баллов)
 *
 * Имеется специальное устройство, представляющее собой
 * конвейер из cells ячеек (нумеруются от 0 до cells - 1 слева направо) и датчик, двигающийся над этим конвейером.
 * Строка commands содержит последовательность команд, выполняемых данным устройством, например +>+>+>+>+
 * Каждая команда кодируется одним специальным символом:
 *	> - сдвиг датчика вправо на 1 ячейку;
 *  < - сдвиг датчика влево на 1 ячейку;
 *	+ - увеличение значения в ячейке под датчиком на 1 ед.;
 *	- - уменьшение значения в ячейке под датчиком на 1 ед.;
 *	[ - если значение под датчиком равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей следующей командой ']' (с учётом вложенности);
 *	] - если значение под датчиком не равно 0, в качестве следующей команды следует воспринимать
 *  	не следующую по порядку, а идущую за соответствующей предыдущей командой '[' (с учётом вложенности);
 *      (комбинация [] имитирует цикл)
 *  пробел - пустая команда
 *
 * Изначально все ячейки заполнены значением 0 и датчик стоит на ячейке с номером N/2 (округлять вниз)
 *
 * После выполнения limit команд или всех команд из commands следует прекратить выполнение последовательности команд.
 * Учитываются все команды, в том числе несостоявшиеся переходы ("[" при значении под датчиком не равном 0 и "]" при
 * значении под датчиком равном 0) и пробелы.
 *
 * Вернуть список размера cells, содержащий элементы ячеек устройства после завершения выполнения последовательности.
 * Например, для 10 ячеек и командной строки +>+>+>+>+ результат должен быть 0,0,0,0,0,1,1,1,1,1
 *
 * Все прочие символы следует считать ошибочными и формировать исключение IllegalArgumentException.
 * То же исключение формируется, если у символов [ ] не оказывается пары.
 * Выход за границу конвейера также следует считать ошибкой и формировать исключение IllegalStateException.
 * Считать, что ошибочные символы и непарные скобки являются более приоритетной ошибкой чем выход за границу ленты,
 * то есть если в программе присутствует некорректный символ или непарная скобка, то должно быть выброшено
 * IllegalArgumentException.
 * IllegalArgumentException должен бросаться даже если ошибочная команда не была достигнута в ходе выполнения.
 *
 */
fun computeDeviceCells(cells: Int, commands: String, limit: Int): List<Int> = TODO()

/**
 * В строке text содержатся результаты матчей команд
 * в следующем виде:
 *
 * "0:1; Зенит:Спартак;
 * 1:0; Зенит:ЦСКА;
 * 0:2; Барнаулец:Зенит;
 * 4:4; Подмосквич:Барнаулец;"
 *
 * Названия команд
 * состоят только из букв (кириллица/латиница) и чисел; без пробелов,
 * дефисов, двоеточий и т.д.
 *
 * Необходимо подсчитать число очков по следующим правилам:
 *  - за победу даётся 3 очка
 *  - за ничью даётся одно очко
 *  - за проигрыш даётся 0 очков.
 *
 * На вход также подается список строк teams, который содержит
 * названия интересующих нас футбольных команд. Следует вернуть список
 * команд teams, отсортированных по количеству набранных очков (от
 * большего к меньшему). Если у двух команд одинаковое количество
 * очков --- можно располагать
 * их в любом порядке. Если команда ни разу не играла (т.е. ее имя ни
 * разу не встречалось в результатах игр text), считать что у нее 0
 * очков.
 * При нарушении формата следует выбросить IllegalArgumentException.
 * Имя функции и тип результата функции предложить самостоятельно;
 * в задании указан тип Collection<Any>, то есть коллекция объектов
 * произвольного типа, можно (и нужно) изменить как вид коллекции,
 * так и тип её элементов.
 *
 * Кроме функции, следует написать тесты,
 * подтверждающие её работоспособность.
 */

fun football(text: String, teams: List<String>): Map<String, Int> {
    if (text.matches(Regex("""(\d+:\d+;\s[а-яА-Я\w]+:[а-яА-Я\w]+;)+"""))) {
        val lines = text.replace(" ", "").split(";")
        val res = mutableMapOf<String, Int>()
        for (i in 0 until lines.size - 1 step 2) {
            val values = lines[i].split(":")
            val team = lines[i + 1].split(":")
            if (res[team.first()] == null) res[team.first()] = 0
            if (res[team.last()] == null) res[team.last()] = 0
            if (values[0] > values[1]) res[team.first()] = res[team.first()]!! + 3
            else {
                if (values[0] == values[1]) {
                    res[team.first()] = res[team.first()]!! + 1
                    res[team.last()] = res[team.last()]!! + 1
                } else
                    if (values[1] > values[0]) res[team.last()] = res[team.last()]!! + 3
            }
        }
        for (team in teams) if (res[team] == null) res[team] = 0
        return res.toList().sortedByDescending { (k, v) -> v }.toMutableMap().filter { it.key in teams }
    } else throw IllegalArgumentException()
}
